mod alignment;
mod ast_c;
mod ast_h;
mod basic_types;
mod type_impl;
pub mod type_trait;

pub const INDENTION: usize = 4;

pub fn header_macro_name(stem: &str) -> String {
    String::from(format!("_DDSL_{}_H_", stem.to_uppercase()))
}

pub fn scoped_name(scope: &Vec<String>, id: &str) -> String {
    let mut name = scope.join("_");
    name.push_str("_");
    name.push_str(id);
    String::from(name)
}

pub fn generate_ddsgen_trait_for_type(typename: &str, scope:&Vec<String>) -> String {
    let template = r###"
    impl DDSGenType for {TYPENAME} {
        unsafe fn get_descriptor() -> &'static dds_topic_descriptor {
            &{SCOPEDNAME}_desc
        }
    }

    // This is generated by the cyclonedds codegenerator in the c file.
    extern "C" {
        pub static {SCOPEDNAME}_desc: dds_topic_descriptor;
    }

"###;

    let template = template.replace("{TYPENAME}", typename);
    template.replace("{SCOPEDNAME}", &scoped_name(scope, typename))
}

